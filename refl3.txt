You can have on your remote repo only those changes you are wanting to share.
Think of this like the stable branch, the shared branch is the portion of the project that you make public on GitHub.

When would you want to use a remote repository rather than keeping all your work local?
When you are working with others on the same project.
When you are wanting a remote backup, though this is not private. 
You could push your whole repo to your own remote (for backup) and push the shared branch to the shared project repo (for collaborating).

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Sounds like either could be bad. If you are working from two computers on the same branch and forget to pull before you begin work, you'll have two identically named branches with different content. 
If you are working on the same branch as someone else you may not want their changes mixed with yours. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?
a branch is a copy of a history of commits
it exists only within a repo
use it when you want to make changes but keep then temporarily separate from other branches. branches are usually merged into other branches at some point.
a clone and a fork are both copies of repos
a clone is a local copy from either a remote repo or another local repo
a fork is a non-local copy from a non-local repo
clone a repo when you will be contributing to that repo
fork a repo when you wont be contributing to the original repo but will make your own version to which you will contribute

What is the benefit of having a copy of the last known state of the remote stored locally?
Allows you to work offline, to inspect differences between the local and the remote, to merge local with remote when you are ready. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
you would need to keep several versions of the project directories, and back up all of them. you'd need people to say when they've got a file open so that other's could not change it. if you had two people working in the same file you'd need to frequently diff them using OS tools and copy/paste in the changes that were compatible. you'd have to test the compiled file to verify nothing broke.  The manual method would be manageable as long as you had good communication and leadership, and the team members diligently kept to boundaries.  In a distributed team this would only be possible with real time audio chat.  It would be easier to not have to use the complex git/github system, but it would be harder to manage the timing of file editing. 