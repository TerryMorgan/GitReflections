Udacity course: Git and GitHub, Lesson Reflections

Lesson 1

Viewing a diff btw the two versions greatly reduced the amount of code I had to read. I was only reading a few lines looking for the typo instead of a thousand.

Having easy access to the history of a file could show me if I am making the same sort of mistake repeatedly, if I am progressing in my understanding by making a series of repeat mistakes.

I want to save my code when there is a long pause in editing, when I chose and when a suffcient number of changes have accumulated.
Manual saving stands the chance you wont commit often enough and the commits will be too big and not useful. 

Some version control systems treat files separately because the changes are not likely to be related, like in GoogleDocs. Git treats files as a set because the files are code, and are likely to interrelate.

git log gives you an overview of the type and frequency of changes. 
If you incl --stat you get a sense of the size of the changes.
git diff shows you the details of the changes 

Using version control makes it much easier to make dangerous changes.
The ease with which you can restore to a prior working copy makes it simple and not time consuming or brain power consuming to go back. 
You don't have to save a complete copy of your app, just in case.
When you've made the change you aren't as tempted to put things back manually.
Rolling back is really easy and you can do it any time. 

You can create a branch that makes the dangerous change and preserve your stable branch. The stable branch can continue advancing. You can edit copy, add images, etc. I don't know how mergeable the two would be, but if you understood merging, you could aim to affect different areas so that merging becomes a practical option.

I want to try using Git to manage my next student project and my research into Wordpress themes and plugins.
I think version control will help me to pare down my research notes to just the most relevant stuff without fear of deleting stuff I later want to get back. 
Whatever my next web dev project, I want to consciously use version control for tracking logical changes, such as adding a feature, or completing new pages, etc. 

Lesson 2

When you initialize a repository, git takes inventory of that directory. Notes the files avaiable to be tracked, and creates the record of files that are in and out of tracking. Without this step, there would be not .git file and no files would be tracked. The directory would not be a respository. 

The staging area differs from the working directory in that it is a list that is a subset of the working directory. The working directory is all the files. The staging area is those files that are pending commit. The repository is all those files in the working directory that are being tracked, plus their histories.

The value of the staging area is to give you control over what is included in one commit. By including only part of the file collection you can limit commits to logical chunks.

To ensure you have one logical change per commit, review changed files in the working directory. Select only those files that were involved in that one logical change and stage them. Commit them. Repeat until you have staged and committed all the separate logical ideas. This assumes that you have not made more than one logical change to the same files. 

Branches would be helpful in keeping history organized by giving meaningfull names to branches, rather than meaningless id numbers. The named branch is all about that topic and nothing else. You can be working on a new feature, and a branch keeps that feature separate, your small changes become linear commits along that branch. Branches allow you to radically experiment with your code, keeping the stable code version accessible for bug fixes and copy editing. 

Diagrams of branch structure show where each commit is and what it's lineage is. They can help you understand why a commit is not on a named branch.

The result of a merge is a single commit that contains the changes from both branches and the identity of both parents. 

Automatic merging is much easier and faster but I suppose it might mangle your code. Depends how good it's algorithm is. Manual merging is way slower. Hopefully only needed when automatic detects a conflict. Git must be pretty good or it wouldn't be popular.
